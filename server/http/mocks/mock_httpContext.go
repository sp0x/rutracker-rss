// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Header mocks base method
func (m *MockContext) Header(name, value string) {
	//m.ctrl.T.Helper()
	m.ctrl.Call(m, "Header", name, value)
}

// Header indicates an expected call of Header
func (mr *MockContextMockRecorder) Header(name, value interface{}) *gomock.Call {
	//mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockContext)(nil).Header), name, value)
}

// String mocks base method
func (m *MockContext) String(code int, format string, values ...interface{}) {
	//m.ctrl.T.Helper()
	varargs := []interface{}{code, format}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "String", varargs...)
}

// String indicates an expected call of String
func (mr *MockContextMockRecorder) String(code, format interface{}, values ...interface{}) *gomock.Call {
	//mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{code, format}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockContext)(nil).String), varargs...)
}

// Param mocks base method
func (m *MockContext) Param(s string) string {
	//m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// Param indicates an expected call of Param
func (mr *MockContextMockRecorder) Param(s interface{}) *gomock.Call {
	//mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockContext)(nil).Param), s)
}

// Error mocks base method
func (m *MockContext) Error(err error) *gin.Error {
	//m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error", err)
	ret0, _ := ret[0].(*gin.Error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockContextMockRecorder) Error(err interface{}) *gomock.Call {
	//mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockContext)(nil).Error), err)
}

// DataFromReader mocks base method
func (m *MockContext) DataFromReader(code int, contentLength int64, contentType string, reader io.Reader, extraHeaders map[string]string) {
	//m.ctrl.T.Helper()
	m.ctrl.Call(m, "DataFromReader", code, contentLength, contentType, reader, extraHeaders)
}

// DataFromReader indicates an expected call of DataFromReader
func (mr *MockContextMockRecorder) DataFromReader(code, contentLength, contentType, reader, extraHeaders interface{}) *gomock.Call {
	//mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataFromReader", reflect.TypeOf((*MockContext)(nil).DataFromReader), code, contentLength, contentType, reader, extraHeaders)
}
