// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sp0x/torrentd/server/rss (interfaces: HttpContext)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHttpContext is a mock of HttpContext interface
type MockHttpContext struct {
	ctrl     *gomock.Controller
	recorder *MockHttpContextMockRecorder
}

// MockHttpContextMockRecorder is the mock recorder for MockHttpContext
type MockHttpContextMockRecorder struct {
	mock *MockHttpContext
}

// NewMockHttpContext creates a new mock instance
func NewMockHttpContext(ctrl *gomock.Controller) *MockHttpContext {
	mock := &MockHttpContext{ctrl: ctrl}
	mock.recorder = &MockHttpContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpContext) EXPECT() *MockHttpContextMockRecorder {
	return m.recorder
}

// Header mocks base method
func (m *MockHttpContext) Header(arg0, arg1 string) {
	//m.ctrl.T.Helper()
	m.ctrl.Call(m, "Header", arg0, arg1)
}

// Header indicates an expected call of Header
func (mr *MockHttpContextMockRecorder) Header(arg0, arg1 interface{}) *gomock.Call {
	//mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockHttpContext)(nil).Header), arg0, arg1)
}

// String mocks base method
func (m *MockHttpContext) String(arg0 int, arg1 string, arg2 ...interface{}) {
	//m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "String", varargs...)
}

// String indicates an expected call of String
func (mr *MockHttpContextMockRecorder) String(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	//mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockHttpContext)(nil).String), varargs...)
}
