// Code generated by MockGen. DO NOT EDIT.
// Source: source.go

// Package mocks is a generated GoMock package.
package mocks

import (
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	source "github.com/sp0x/torrentd/indexer/source"
)

// MockFetchResult is a mock of FetchResult interface
type MockFetchResult struct {
	ctrl     *gomock.Controller
	recorder *MockFetchResultMockRecorder
}

// MockFetchResultMockRecorder is the mock recorder for MockFetchResult
type MockFetchResultMockRecorder struct {
	mock *MockFetchResult
}

// NewMockFetchResult creates a new mock instance
func NewMockFetchResult(ctrl *gomock.Controller) *MockFetchResult {
	mock := &MockFetchResult{ctrl: ctrl}
	mock.recorder = &MockFetchResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetchResult) EXPECT() *MockFetchResultMockRecorder {
	return m.recorder
}

// ContentType mocks base method
func (m *MockFetchResult) ContentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContentType indicates an expected call of ContentType
func (mr *MockFetchResultMockRecorder) ContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockFetchResult)(nil).ContentType))
}

// Encoding mocks base method
func (m *MockFetchResult) Encoding() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encoding")
	ret0, _ := ret[0].(string)
	return ret0
}

// Encoding indicates an expected call of Encoding
func (mr *MockFetchResultMockRecorder) Encoding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encoding", reflect.TypeOf((*MockFetchResult)(nil).Encoding))
}

// MockContentFetcher is a mock of ContentFetcher interface
type MockContentFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockContentFetcherMockRecorder
}

// MockContentFetcherMockRecorder is the mock recorder for MockContentFetcher
type MockContentFetcherMockRecorder struct {
	mock *MockContentFetcher
}

// NewMockContentFetcher creates a new mock instance
func NewMockContentFetcher(ctrl *gomock.Controller) *MockContentFetcher {
	mock := &MockContentFetcher{ctrl: ctrl}
	mock.recorder = &MockContentFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContentFetcher) EXPECT() *MockContentFetcherMockRecorder {
	return m.recorder
}

// Cleanup mocks base method
func (m *MockContentFetcher) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockContentFetcherMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockContentFetcher)(nil).Cleanup))
}

// Fetch mocks base method
func (m *MockContentFetcher) Fetch(target *source.SearchTarget) (source.FetchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", target)
	ret0, _ := ret[0].(source.FetchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockContentFetcherMockRecorder) Fetch(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockContentFetcher)(nil).Fetch), target)
}

// FetchURL mocks base method
func (m *MockContentFetcher) FetchURL(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchURL", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchURL indicates an expected call of FetchURL
func (mr *MockContentFetcherMockRecorder) FetchUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchURL", reflect.TypeOf((*MockContentFetcher)(nil).FetchURL), url)
}

// Post mocks base method
func (m *MockContentFetcher) Post(url string, data url.Values, log bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, data, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post
func (mr *MockContentFetcherMockRecorder) Post(url, data, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockContentFetcher)(nil).Post), url, data, log)
}
