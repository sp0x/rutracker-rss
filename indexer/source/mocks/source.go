// Code generated by MockGen. DO NOT EDIT.
// Source: source.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	source "github.com/sp0x/torrentd/indexer/source"
	url "net/url"
	reflect "reflect"
)

// MockContentFetcher is a mock of ContentFetcher interface
type MockContentFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockContentFetcherMockRecorder
}

// MockContentFetcherMockRecorder is the mock recorder for MockContentFetcher
type MockContentFetcherMockRecorder struct {
	mock *MockContentFetcher
}

// NewMockContentFetcher creates a new mock instance
func NewMockContentFetcher(ctrl *gomock.Controller) *MockContentFetcher {
	mock := &MockContentFetcher{ctrl: ctrl}
	mock.recorder = &MockContentFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContentFetcher) EXPECT() *MockContentFetcherMockRecorder {
	return m.recorder
}

// Cleanup mocks base method
func (m *MockContentFetcher) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockContentFetcherMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockContentFetcher)(nil).Cleanup))
}

// Fetch mocks base method
func (m *MockContentFetcher) Fetch(target *source.SearchTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch
func (mr *MockContentFetcherMockRecorder) Fetch(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockContentFetcher)(nil).Fetch), target)
}

// FetchUrl mocks base method
func (m *MockContentFetcher) FetchUrl(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUrl", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchUrl indicates an expected call of FetchUrl
func (mr *MockContentFetcherMockRecorder) FetchUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUrl", reflect.TypeOf((*MockContentFetcher)(nil).FetchUrl), url)
}

// Post mocks base method
func (m *MockContentFetcher) Post(url string, data url.Values, log bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, data, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post
func (mr *MockContentFetcherMockRecorder) Post(url, data, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockContentFetcher)(nil).Post), url, data, log)
}
