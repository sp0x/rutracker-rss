// Code generated by MockGen. DO NOT EDIT.
// Source: creation.go

// Package indexer is a generated GoMock package.
package indexer

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/sp0x/torrentd/config"
	categories "github.com/sp0x/torrentd/indexer/categories"
	reflect "reflect"
)

// MockScope is a mock of Scope interface
type MockScope struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMockRecorder
}

// MockScopeMockRecorder is the mock recorder for MockScope
type MockScopeMockRecorder struct {
	mock *MockScope
}

// NewMockScope creates a new mock instance
func NewMockScope(ctrl *gomock.Controller) *MockScope {
	mock := &MockScope{ctrl: ctrl}
	mock.recorder = &MockScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScope) EXPECT() *MockScopeMockRecorder {
	return m.recorder
}

// Lookup mocks base method
func (m *MockScope) Lookup(config config.Config, key string) (Indexer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", config, key)
	ret0, _ := ret[0].(Indexer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup
func (mr *MockScopeMockRecorder) Lookup(config, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockScope)(nil).Lookup), config, key)
}

// CreateAggregateForCategories mocks base method
func (m *MockScope) CreateAggregateForCategories(config config.Config, selector *IndexerSelector, cats []categories.Category) (Indexer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAggregateForCategories", config, selector, cats)
	ret0, _ := ret[0].(Indexer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAggregateForCategories indicates an expected call of CreateAggregateForCategories
func (mr *MockScopeMockRecorder) CreateAggregateForCategories(config, selector, cats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAggregateForCategories", reflect.TypeOf((*MockScope)(nil).CreateAggregateForCategories), config, selector, cats)
}

// CreateAggregate mocks base method
func (m *MockScope) CreateAggregate(config config.Config, selector *IndexerSelector) (Indexer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAggregate", config, selector)
	ret0, _ := ret[0].(Indexer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAggregate indicates an expected call of CreateAggregate
func (mr *MockScopeMockRecorder) CreateAggregate(config, selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAggregate", reflect.TypeOf((*MockScope)(nil).CreateAggregate), config, selector)
}

// Indexes mocks base method
func (m *MockScope) Indexes() map[string]Indexer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Indexes")
	ret0, _ := ret[0].(map[string]Indexer)
	return ret0
}

// Indexes indicates an expected call of Indexes
func (mr *MockScopeMockRecorder) Indexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Indexes", reflect.TypeOf((*MockScope)(nil).Indexes))
}
